name: Build Opus

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install v141 toolset for VS2022
        shell: pwsh
        run: |
          $vsInstaller = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vs_installer.exe"
          if (Test-Path $vsInstaller) {
            Write-Host "Installing v141 toolset..."
            & $vsInstaller modify --installPath "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise" --add Microsoft.VisualStudio.Component.VC.v141 --wait
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install v141 toolset. Exit code: $LASTEXITCODE"
              exit 1
            }
            Write-Host "v141 toolset installed successfully"
          } else {
            Write-Error "Visual Studio installer not found at $vsInstaller"
            exit 1
          }

      - name: Verify v141 toolset installation
        shell: pwsh
        run: |
          $v141Path = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC"
          if (Test-Path $v141Path) {
            Write-Host "Available MSVC versions:"
            Get-ChildItem $v141Path | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          $v141ToolsPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Platforms\Win32\PlatformToolsets\v141"
          if (Test-Path $v141ToolsPath) {
            Write-Host "v141 platform toolset found at: $v141ToolsPath"
          } else {
            Write-Warning "v141 platform toolset not found. Listing available toolsets:"
            $toolsetsPath = "${env:ProgramFiles}\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\v170\Platforms\Win32\PlatformToolsets"
            if (Test-Path $toolsetsPath) {
              Get-ChildItem $toolsetsPath | ForEach-Object { Write-Host "  $($_.Name)" }
            }
          }

      - name: Setup MSBuild and Developer Environment
        uses: microsoft/setup-msbuild@v1.3.1
        with:
          msbuild-architecture: x86

      - name: Download Opus
        run: |
          git clone https://github.com/xiph/opus.git
          cd opus
          git fetch --tags
          git checkout v1.5.2

      - name: Build Opus x86
        shell: cmd
        run: |
          cd opus
          echo "Configuring x86 build..."
          cmake -S . -B build/x86 -G "Visual Studio 17 2022" -A Win32 -T v141 -DBUILD_SHARED_LIBS=ON ^
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=%cd%/build/Release/x86 ^
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=%cd%/build/Release/x86
          if %ERRORLEVEL% neq 0 (
            echo "CMake configuration failed for x86"
            exit /b 1
          )
          echo "Building x86..."
          msbuild build/x86/opus.sln /p:Configuration=Release /p:Platform=Win32 /v:minimal
          if %ERRORLEVEL% neq 0 (
            echo "MSBuild failed for x86"
            exit /b 1
          )

      - name: Build Opus x64
        shell: cmd
        run: |
          cd opus
          echo "Configuring x64 build..."
          cmake -S . -B build/x64 -G "Visual Studio 17 2022" -A x64 -T v141 -DBUILD_SHARED_LIBS=ON ^
            -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=%cd%/build/Release/x64 ^
            -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=%cd%/build/Release/x64
          if %ERRORLEVEL% neq 0 (
            echo "CMake configuration failed for x64"
            exit /b 1
          )
          echo "Building x64..."
          msbuild build/x64/opus.sln /p:Configuration=Release /p:Platform=x64 /v:minimal
          if %ERRORLEVEL% neq 0 (
            echo "MSBuild failed for x64"
            exit /b 1
          )

      - name: Collect artifacts
        shell: cmd
        run: |
          set OPUS_VER=1.5.2
          mkdir artifacts
          mkdir artifacts\include
          mkdir artifacts\lib_x86
          mkdir artifacts\lib_x64

          echo "Collecting x86 artifacts..."
          copy opus\build\Release\x86\*.dll artifacts\lib_x86\ 2>nul || echo "No x86 DLLs found"
          copy opus\build\Release\x86\*.lib artifacts\lib_x86\ 2>nul || echo "No x86 LIBs found"

          echo "Collecting x64 artifacts..."
          copy opus\build\Release\x64\*.dll artifacts\lib_x64\ 2>nul || echo "No x64 DLLs found"
          copy opus\build\Release\x64\*.lib artifacts\lib_x64\ 2>nul || echo "No x64 LIBs found"

          echo "Collecting headers..."
          xcopy opus\include artifacts\include /E /I /Y

          echo "Creating zip archive..."
          powershell Compress-Archive -Path artifacts\* -DestinationPath opus-%OPUS_VER%.zip

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: opus-1.5.2
          path: opus-1.5.2.zip
