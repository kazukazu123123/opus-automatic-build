name: Build Opus

on:
  push:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Opus tag
        id: get_tag
        shell: bash
        run: |
          git clone --depth 1 https://github.com/xiph/opus.git temp_opus
          cd temp_opus
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-version:refname | head -n 1)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using latest Opus tag: $LATEST_TAG"
          cd ..
          rm -rf temp_opus

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Download Opus
        run: |
          git clone https://github.com/xiph/opus.git
          cd opus
          git fetch --tags
          git checkout ${{ steps.get_tag.outputs.tag }}

      - name: Build Opus x86
        shell: cmd
        run: |
          cd opus
          echo "Configuring x86 build..."
          cmake -S . -B build/x86 -G "Visual Studio 17 2022" -A Win32 -DBUILD_SHARED_LIBS=ON
          if %ERRORLEVEL% neq 0 (
            echo "CMake configuration failed for x86"
            exit /b 1
          )
          echo "Building x86..."
          cmake --build build/x86 --config Release
          if %ERRORLEVEL% neq 0 (
            echo "Build failed for x86"
            exit /b 1
          )

      - name: Build Opus x64
        shell: cmd
        run: |
          cd opus
          echo "Configuring x64 build..."
          cmake -S . -B build/x64 -G "Visual Studio 17 2022" -A x64 -DBUILD_SHARED_LIBS=ON
          if %ERRORLEVEL% neq 0 (
            echo "CMake configuration failed for x64"
            exit /b 1
          )
          echo "Building x64..."
          cmake --build build/x64 --config Release
          if %ERRORLEVEL% neq 0 (
            echo "Build failed for x64"
            exit /b 1
          )

      - name: Find and collect artifacts
        shell: cmd
        run: |
          cd opus
          echo "Searching for generated files..."
          
          echo "=== x86 build directory structure ==="
          dir build\x86 /s /b | findstr /E "\.dll \.lib \.exe"
          
          echo "=== x64 build directory structure ==="
          dir build\x64 /s /b | findstr /E "\.dll \.lib \.exe"
          
          echo "=== Creating artifacts directory ==="
          cd ..
          set TAG_NAME=${{ steps.get_tag.outputs.tag }}
          mkdir artifacts
          mkdir artifacts\include
          mkdir artifacts\lib_x86
          mkdir artifacts\lib_x64

          echo "Collecting x86 artifacts..."
          for /r opus\build\x86 %%f in (*.dll *.lib) do (
              copy "%%f" artifacts\lib_x86\
          )

          echo "Collecting x64 artifacts..."
          for /r opus\build\x64 %%f in (*.dll *.lib) do (
              copy "%%f" artifacts\lib_x64\
          )

          echo "Collecting headers..."
          for /r opus\include %%f in (*.h) do (
              copy "%%f" artifacts\include\
          )

          echo "=== Final artifact contents ==="
          dir artifacts /s

      - name: Create ZIP archive
        shell: powershell
        run: |
          $tagName = "${{ steps.get_tag.outputs.tag }}"
          $archiveName = "opus-windows-$tagName.zip"
          Compress-Archive -Path "artifacts\*" -DestinationPath $archiveName
          echo "ARCHIVE_NAME=$archiveName" >> $env:GITHUB_ENV

      - name: Delete existing release (if exists)
        uses: actions/github-script@v7
        with:
          script: |
            const tag = "${{ steps.get_tag.outputs.tag }}";
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              if (release.data) {
                console.log(`Deleting existing release: ${release.data.id}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
              }
            } catch (error) {
              if (error.status === 404) {
                console.log('No existing release found, proceeding with new release creation');
              } else {
                throw error;
              }
            }

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Opus ${{ steps.get_tag.outputs.tag }} - Windows Binaries
          body: |
            Windows binaries for Opus ${{ steps.get_tag.outputs.tag }}
            
            ## Contents:
            - **lib_x86/**: 32-bit libraries and DLLs
            - **lib_x64/**: 64-bit libraries and DLLs  
            - **include/**: Header files
            
            ## Usage:
            1. Extract the archive
            2. Link against the appropriate libraries for your target architecture
            3. Include the header files in your project
            
            Built with Visual Studio 2022 on Windows Server 2022.
          files: |
            ${{ env.ARCHIVE_NAME }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: opus-${{ steps.get_tag.outputs.tag }}
          path: artifacts/**
