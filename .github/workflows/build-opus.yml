name: Build Opus (Windows via Ubuntu)

on:
  push:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest Opus tag
        id: get_tag
        run: |
          git clone --depth 1 https://github.com/xiph/opus.git temp_opus
          cd temp_opus
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-version:refname | head -n 1)
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Using latest Opus tag: $LATEST_TAG"
          cd ..
          rm -rf temp_opus

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake libtool make gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 gcc-mingw-w64-i686 g++-mingw-w64-i686 pkg-config

      - name: Clone Opus
        run: |
          git clone https://github.com/xiph/opus.git
          cd opus
          git fetch --tags
          git checkout ${{ steps.get_tag.outputs.tag }}

      - name: Build Opus x86
        run: |
          cd opus
          mkdir -p build/x86
          ./configure --disable-intrinsics --host=i686-w64-mingw32 --disable-asm --prefix=/ --disable-rtcd --disable-extra-programs --disable-stack-protector
          sed -i 's/-D_FORTIFY_SOURCE=2//g' Makefile
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build/x86

      - name: Build Opus x64
        run: |
          cd opus
          mkdir -p build/x64
          ./configure --disable-intrinsics --host=x86_64-w64-mingw32 --disable-asm --prefix=/ --disable-rtcd --disable-extra-programs --disable-stack-protector
          sed -i 's/-D_FORTIFY_SOURCE=2//g' Makefile
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build/x64

      - name: Collect artifacts
        run: |
          cd opus
          mkdir -p artifacts/include
          mkdir -p artifacts/lib_x86
          mkdir -p artifacts/lib_x64

          cp -r include/* artifacts/include/
          cp -r build/x86/usr/local/lib/* artifacts/lib_x86/
          cp -r build/x64/usr/local/lib/* artifacts/lib_x64/

      - name: Create ZIP archive
        run: |
          tag=${{ steps.get_tag.outputs.tag }}
          archive_name="opus-windows-$tag.zip"
          zip -r "$archive_name" artifacts
          echo "ARCHIVE_NAME=$archive_name" >> $GITHUB_ENV

      - name: Delete existing release (if exists)
        uses: actions/github-script@v7
        with:
          script: |
            const tag = "${{ steps.get_tag.outputs.tag }}";
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
              
              if (release.data) {
                console.log(`Deleting existing release: ${release.data.id}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
              }
            } catch (error) {
              if (error.status === 404) {
                console.log('No existing release found, proceeding with new release creation');
              } else {
                throw error;
              }
            }

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          name: Opus ${{ steps.get_tag.outputs.tag }} - Windows Binaries
          body: |
            Windows binaries for Opus ${{ steps.get_tag.outputs.tag }}
            
            ## Contents:
            - **lib_x86/**: 32-bit libraries and DLLs
            - **lib_x64/**: 64-bit libraries and DLLs  
            - **include/**: Header files
            
            ## Usage:
            1. Extract the archive
            2. Link against the appropriate libraries for your target architecture
            3. Include the header files in your project
            
            Built with MinGW-w64 on Ubuntu.
          files: ${{ env.ARCHIVE_NAME }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: opus-${{ steps.get_tag.outputs.tag }}
          path: artifacts/**
