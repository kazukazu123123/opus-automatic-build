name: Build Opus (Windows via Ubuntu)

on:
  push:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf automake libtool \
            gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 \
            gcc-mingw-w64-i686 g++-mingw-w64-i686 pkg-config zip wget

      - name: Download Opus tarball
        run: |
          wget https://downloads.xiph.org/releases/opus/opus-1.5.2.tar.gz
          tar -xzf opus-1.5.2.tar.gz

      - name: Build Opus for x86 (i686)
        run: |
          cd opus-1.5.2
          mkdir -p build/x86
          ./configure --disable-intrinsics --host=i686-w64-mingw32 --disable-asm \
                      --prefix=/ --disable-rtcd --disable-extra-programs --disable-stack-protector
          sed -i 's/-D_FORTIFY_SOURCE=2//g' Makefile
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build/x86

      - name: Build Opus for x64 (x886_64)
        run: |
          cd opus-1.5.2
          mkdir -p build/x64
          ./configure --disable-intrinsics --host=x86_64-w64-mingw32 --disable-asm \
                      --prefix=/ --disable-rtcd --disable-extra-programs --disable-stack-protector
          sed -i 's/-D_FORTIFY_SOURCE=2//g' Makefile
          make -j$(nproc)
          make install DESTDIR=$(pwd)/build/x64

      - name: Collect artifacts
        run: |
          cd opus-1.5.2
          mkdir -p artifacts/include
          mkdir -p artifacts/lib_x86
          mkdir -p artifacts/lib_x64

          cp -r include/* artifacts/include/
          cp -r build/x86/usr/local/lib/* artifacts/lib_x86/ || true
          cp -r build/x64/usr/local/lib/* artifacts/lib_x64/ || true

      - name: Create ZIP archive
        run: |
          cd opus-1.5.2
          archive_name="opus-windows-1.5.2.zip"
          rm -f "$archive_name"
          zip -r "$archive_name" artifacts
          echo "ARCHIVE_NAME=$archive_name" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "opus-1.5.2"
          name: Opus 1.5.2 - Windows Binaries
          body: |
            Windows binaries for Opus 1.5.2
            
            ## Contents:
            - **lib_x86/**: 32-bit libraries and DLLs
            - **lib_x64/**: 64-bit libraries and DLLs  
            - **include/**: Header files
            
            ## Usage:
            1. Extract the archive
            2. Link against the appropriate libraries for your target architecture
            3. Include the header files in your project
            
            Built with MinGW-w64 on Ubuntu.
          files: ${{ env.ARCHIVE_NAME }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: opus-1.5.2
          path: artifacts/**
